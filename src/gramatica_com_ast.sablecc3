/*
www.cin.ufpe.br/~if688/SableCC/SableCC_2008.1.ppt

Configuracoes do sable no linux:
- Location: /usr/lib/jvm/java-8-openjdk/jre/bin/java
- Working Directory: ${container_loc}
- Arguments: -classpath /home/igorfr2/Desktop/sablecc-3.2/lib/sablecc.jar org.sablecc.sablecc.SableCC ${resource_name}

Coisas pendentes:
- Verificar expressao -> expressao logica
*/

Package compilador ;


Helpers 
    // Digitos alfanumericos e composicoes
    letramin    = ['a'..'z'] ;
    letracaps   = ['A'..'Z'];
    letra       = [letramin + letracaps];
    digito      = ['0' .. '9'] ;
    sp          = ' ';
    ctab        = 9;
    cr          = 13;
    nl          = 10;
    nline       = cr | nl | cr nl;
    char        = [letra + digito];
    cmt_linha     = '//';
    cmt_a       = '/*';
    cmt_f       = '*/';
    todos       = [0 .. 0xFFFF];
    char_esp    = [[[0x20..0xFFFF]-letra]-digito];

    tipo_string = 'caractere';
    tipos_dados = tipo_string|'real'|'inteiro'|'booleano';
    word        = tipos_dados|'inicio'|'fim'|'se'|'senao'|'enquanto'|'para'|'avalie'|'caso'|'verdadeiro'|'falso';
    bool_true   = 'verdadeiro';
    bool_false  = 'falso';
    h_programa  = 'programa';
    h_inicio    = 'inicio';
    nome        = ('_'|letra)(char|'_')*;


States
    normal,
    comentario;


Tokens
    // Divisores
    parenteses_esquerdo = '(';
    parenteses_direito  = ')';
    colchete_esquerdo   = '[';
    colchete_direito    = ']';
    //chave_direita     = '{';
    //chave_esquerdo    = '}';
    ponto_virgula       = ';';
    dois_pontos         = ':';
    virgula             = ',';
    underline           = '_';
    atribuir            = ':=';
    tab                 = ctab;
    enter               = cr | nl | cr nl;
    espaco              = ' ';
    igual               = '=';
    programa            = h_programa;
    inicio              = h_inicio;
    fim                 = 'fim.';
    
    // Operadores Aritmeticos
    subtrair    = '-';
    somar       = '+';
    dividir     = '/';
    multiplicar = '*';
    potencia    = '**';
    mod         = '%';

    // Operadores Logicos
    maior       = '>';
    menor       = '<';
    maior_igual = '>=';
    menor_igual = '<=';
    nao         = '!';
    e           = 'e';
    ou          = '|';
    xor         = '^';
    igualdade   = '=';
    diferente   = '<>';
    
    //  Conectores
    de      = 'de';
    ate     = 'ate';
    passo   = 'passo';
    faca    = 'faca'; 

    // Palavras reservadas
    //reservada  = word;
    real         = 'real';
    inteiro      = 'inteiro';
    t_caractere  = 'caractere';
    num_real     = digito digito* ',' digito digito*;
    num_inteiro  = digito*;
    se           = 'se';
    entao        = 'entao';
    senao        = 'senao';
    fimse        = 'fim se';
    fimsenao     = 'fim senao';
    enquanto     = 'enquanto';
    fimenquanto  = 'fim enquanto';
    para         = 'para';
    fimpara      = 'fim para';
    repita       = 'repita';
    avalie       = 'avalie';    //<= o switch
    fimavalie    = 'fim avalie';
    caso         = 'caso';    // <= o case
    verdadeiro   = bool_true;
    falso        = bool_false;
    escreva      = 'escreva';
    leia         = 'leia';
    const        = 'const';
    tipos_dados  = tipos_dados;
    caracter     = '''todos''';
    //vetor             = tipo col id col_e tamanho col_d semi <= type:id[tam];
    vetor               = tipos_dados':'sp? nome'['digito*'];';
    vetor_error         = tipos_dados':'sp? (word |nome '['digito*']') '['digito*']' ;
    vetor_string        = tipo_string':'sp? nome '['digito*'];' | ('''([[[todos-'''] - cr] -nl ])*''');
    vetor_string_error  = tipo_string':'sp? word '['digito*'];' | ('''([todos-'''])*''');
    id                  = ('_'|letra)(char|'_')*;

    // Comentarios
    comentario_linear = cmt_linha;
    {normal->comentario, comentario} comentario = '/*';
    {comentario} comentario_fim = '*/';
    {comentario} comentario_corpo = [todos -['*' + '/']]*;
    {comentario} estrela = '*';
    {comentario} barra = '/';
    {normal} comentario_fim_erro = '*/';


Ignored Tokens
    enter, espaco, tab, comentario_fim_erro, comentario;


Productions

    programa
         {-> P.programa  } =

     {acorpoprograma1} T.programa T.id T.inicio P.declaracoes T.fim
         {-> New programa.corpo (T.id , [P.declaracoes.declaracao] , [  ])  }   |

     {acorpoprograma2} T.programa T.id T.inicio P.declaracoes P.cmd T.fim
         {-> New programa.corpo (T.id , [P.declaracoes.declaracao] , [ P.cmd.comando  ])  }
     ;

    declaracoes
         {-> P.declaracao*  } =

     {declaracao} P.declaracao P.declaracoes
         {-> [P.declaracao , P.declaracoes.declaracao]  }   |

     {fim_declaracao}
         {-> []  }
     ;

    declaracao
         {-> P.declaracao  } =

     P.tipos_dados T.dois_pontos P.variaveis T.ponto_virgula
         {-> New declaracao (P.tipos_dados , P.variaveis)  }   |

     {constante} T.const T.id P.valor T.ponto_virgula
         {-> New declaracao.constante (T.id , P.valor)  }
     ;

    tipos_dados
         {-> P.tipos_dados  } =

     {inteiro} T.inteiro
         {-> New tipos_dados.inteiro (T.inteiro  )  }   |

     {real} T.real
         {-> New tipos_dados.real (T.real  )  }   |

     {caractere} T.t_caractere
         {-> New tipos_dados.caractere (T.t_caractere  )  }
     ;

    variaveis
         {-> P.variaveis  } =

     {variavel} P.variavel
         {-> New variaveis.variavel (P.variavel  )  }   |

     {variaveis} P.variavel T.virgula P.variaveis
         {-> New variaveis.variaveis (P.variavel , P.variaveis  )  }
     ;

    variavel
         {-> P.variavel  } =

     {nome} T.id
         {-> New variavel.nome (T.id  )  }   |

     {vetor} T.id T.colchete_esquerdo T.num_inteiro T.colchete_direito
         {-> New variavel.vetor (T.id , T.num_inteiro)  }
     ;

    valor
         {-> P.valor  } =

     {val_caractere} T.vetor_string
         {-> New valor.val_caractere (T.vetor_string  )  }   |

     {val_inteiro} T.num_inteiro
         {-> New valor.val_inteiro (T.num_inteiro  )  }   |

     {val_real} T.num_real
         {-> New valor.val_real (T.num_real  )  }
     ;

    comando
         {-> P.comando  } =

     {atribuicao} P.variavel T.atribuir P.expressao T.ponto_virgula
         {-> New comando.atribuicao (P.variavel , P.expressao  )  }   |

     {leitura} T.leia T.parenteses_esquerdo P.variavel T.parenteses_direito T.ponto_virgula
         {-> New comando.leitura (P.variavel  )  }   |

     {escrita} T.escreva T.parenteses_esquerdo P.expressao T.parenteses_direito T.ponto_virgula
         {-> New comando.escrita (P.expressao  )  }   |

     {se} T.se T.parenteses_esquerdo P.expressao T.parenteses_direito T.entao P.se_corpo T.fimse T.ponto_virgula
         {-> New comando.se (P.expressao , P.se_corpo  )  }   |

     {avalie} T.avalie T.parenteses_esquerdo P.expressao T.parenteses_direito P.caso_comandos T.senao P.comandos T.fimavalie T.ponto_virgula
         {-> New comando.avalie (P.expressao , P.caso_comandos , P.comandos  )  }   |

     {enquanto} T.enquanto T.parenteses_esquerdo P.expressao T.parenteses_direito T.faca P.comandos T.fimenquanto T.ponto_virgula
         {-> New comando.enquanto (P.expressao , P.comandos  )  }   |

     {repita} T.repita P.comandos T.ate T.parenteses_esquerdo P.expressao T.parenteses_direito T.ponto_virgula
         {-> New comando.repita (P.comandos , P.expressao  )  }   |

     {para} T.para P.variavel T.de [left]: T.num_inteiro T.ate [right]: T.num_inteiro T.faca P.comandos T.fimpara T.ponto_virgula
         {-> New comando.para (P.variavel , left , right , P.comandos  )  }   |

     {para_seg} T.para P.variavel T.de [left]: T.num_inteiro T.passo T.num_inteiro T.ate [right]: T.num_inteiro T.faca P.comandos T.fimpara T.ponto_virgula
         {-> New comando.para_seg (P.variavel , left , T.num_inteiro , right , P.comandos  )  }
     ;

    comandos
         {-> P.comandos  } =

     {comando_unitario} P.comando
         {-> New comandos.comando_unitario (P.comando  )  }   |

     {comandos} P.comando P.comandos
         {-> New comandos.comandos (P.comando , P.comandos  )  }
     ;

    se_corpo
         {-> P.se_corpo  } =

     P.comando P.se_corpo
         {-> New se_corpo (P.comando , P.se_corpo  )  }   |

     {se_senao} P.comando T.senao P.comandos
         {-> New se_corpo.se_senao (P.comando , P.comandos  )  }   |

     {se_unico} P.comando
         {-> New se_corpo.se_unico (P.comando  )  }
     ;

    caso_comandos
         {-> P.caso_comandos  } =

     {caso} T.caso P.valor T.dois_pontos P.comando
         {-> New caso_comandos.caso (P.valor , P.comando  )  }   |

     {casos} T.caso P.valor T.dois_pontos P.comando P.caso_comandos
         {-> New caso_comandos.casos (P.valor , P.comando , P.caso_comandos  )  }
     ;

    expressao
         {-> P.expressao  } =

     {igualdade} P.expressao T.igualdade P.prec2
         {-> New expressao.igualdade (P.expressao , T.igualdade , P.prec2  )  }   |

     {diferente} P.expressao T.diferente P.prec2
         {-> New expressao.diferente (P.expressao , T.diferente , P.prec2  )  }   |

     {menor_ig} P.expressao T.menor_igual P.prec2
         {-> New expressao.menor_ig (P.expressao , T.menor_igual , P.prec2  )  }   |

     {maior_ig} P.expressao T.maior_igual P.prec2
         {-> New expressao.maior_ig (P.expressao , T.maior_igual , P.prec2  )  }   |

     {menor} P.expressao T.menor P.prec2
         {-> New expressao.menor (P.expressao , T.menor , P.prec2  )  }   |

     {maior} P.expressao T.maior P.prec2
         {-> New expressao.maior (P.expressao , T.maior , P.prec2  )  }   |

     {e} P.expressao T.e P.prec2
         {-> New expressao.e (P.expressao , T.e , P.prec2  )  }   |

     {ou} P.expressao T.ou P.prec2
         {-> New expressao.ou (P.expressao , T.ou , P.prec2  )  }   |

     {xor} P.expressao T.xor P.prec2
         {-> New expressao.xor (P.expressao , T.xor , P.prec2  )  }   |

     {not} P.expressao T.nao P.prec2
         {-> New expressao.not (P.expressao , T.nao , P.prec2  )  }   |

     {prec2} P.prec2
         {-> New expressao.prec2 (P.prec2  )  }
     ;

    prec2
         {-> P.prec2  } =

     {inversao} T.subtrair P.prec3
         {-> New prec2.inversao (T.subtrair , P.prec3  )  }   |

     {prec3} prec3
         {-> New prec2.prec3 (prec3  )  }
     ;

    prec3
         {-> P.prec3  } =

     {somar} P.prec3 T.somar P.prec4
         {-> New prec3.somar (P.prec3 , T.somar , P.prec4  )  }   |

     {subtrair} P.prec3 T.subtrair P.prec4
         {-> New prec3.subtrair (P.prec3 , T.subtrair , P.prec4  )  }   |

     {prec4} P.prec4
         {-> New prec3.prec4 (P.prec4  )  }
     ;

    prec4
         {-> P.prec4  } =

     {multiplicar} P.prec4 T.multiplicar P.prec5
         {-> New prec4.multiplicar (P.prec4 , T.multiplicar , P.prec5  )  }   |

     {dividir} P.prec4 T.dividir P.prec5
         {-> New prec4.dividir (P.prec4 , T.dividir , P.prec5  )  }   |

     {prec5} P.prec5
         {-> New prec4.prec5 (P.prec5  )  }
     ;

    prec5
         {-> P.prec5  } =

     {valor} P.valor
         {-> New prec5.valor (P.valor  )  }   |

     {variavel} P.variavel
         {-> New prec5.variavel (P.variavel  )  }   |

     {expressao} T.parenteses_esquerdo P.expressao T.parenteses_direito
         {-> New prec5.expressao (T.parenteses_esquerdo , P.expressao , T.parenteses_direito  )  }
     ;

    cmd
         {-> P.comando*  } =

     {terminal} P.comando
         {-> [ P.comando.comando  ]  }   |

     {non_terminal} P.cmd P.comando
         {-> [ cmd.comando, P.comando.comando  ]  }
     ;

Abstract Syntax Tree
    programa =
     {corpo} T.id P.declaracao* P.comando*
     ;

    declaracao =
     P.tipos_dados P.variaveis |
     {constante} T.id P.valor
     ;

    tipos_dados =
     {inteiro} T.inteiro |
     {real} T.real |
     {caractere} T.t_caractere
     ;

    variaveis =
     {variavel} P.variavel |
     {variaveis} P.variavel P.variaveis
     ;

    variavel =
     {nome} T.id |
     {vetor} T.id T.num_inteiro
     ;

    valor =
     {val_caractere} T.vetor_string |
     {val_inteiro} T.num_inteiro |
     {val_real} T.num_real
     ;

    comando =
     {atribuicao} P.variavel P.expressao |
     {leitura} P.variavel |
     {escrita} P.expressao |
     {se} P.expressao P.se_corpo |
     {avalie} P.expressao P.caso_comandos P.comandos |
     {enquanto} P.expressao P.comandos |
     {repita} P.comandos P.expressao |
     {para} P.variavel [left]: T.num_inteiro [right]: T.num_inteiro P.comandos |
     {para_seg} P.variavel [left]: T.num_inteiro T.num_inteiro [right]: T.num_inteiro P.comandos
     ;

    comandos =
     {comando_unitario} P.comando |
     {comandos} P.comando P.comandos
     ;

    se_corpo =
     P.comando P.se_corpo |
     {se_senao} P.comando P.comandos |
     {se_unico} P.comando
     ;

    caso_comandos =
     {caso} P.valor P.comando |
     {casos} P.valor P.comando P.caso_comandos
     ;

    expressao =
     {igualdade} P.expressao T.igualdade P.prec2 |
     {diferente} P.expressao T.diferente P.prec2 |
     {menor_ig} P.expressao T.menor_igual P.prec2 |
     {maior_ig} P.expressao T.maior_igual P.prec2 |
     {menor} P.expressao T.menor P.prec2 |
     {maior} P.expressao T.maior P.prec2 |
     {e} P.expressao T.e P.prec2 |
     {ou} P.expressao T.ou P.prec2 |
     {xor} P.expressao T.xor P.prec2 |
     {not} P.expressao T.nao P.prec2 |
     {prec2} P.prec2
     ;

    prec2 =
     {inversao} T.subtrair P.prec3 |
     {prec3} prec3
     ;

    prec3 =
     {somar} P.prec3 T.somar P.prec4 |
     {subtrair} P.prec3 T.subtrair P.prec4 |
     {prec4} P.prec4
     ;

    prec4 =
     {multiplicar} P.prec4 T.multiplicar P.prec5 |
     {dividir} P.prec4 T.dividir P.prec5 |
     {prec5} P.prec5
     ;

    prec5 =
     {valor} P.valor |
     {variavel} P.variavel |
     {expressao} T.parenteses_esquerdo P.expressao T.parenteses_direito
     ;

